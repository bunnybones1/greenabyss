var THREE = require('three');
var manageSceneOnEnterFrameObjects = require('utils/manageSceneOnEnterFrameObjects');
var manageSceneOnResizeObjects = require('utils/manageSceneOnResizeObjects');
var manageSceneRayCollisions = require('utils/manageSceneRayCollisions');

const MagicWindowRayLauncher = require('input/rayLaunchers/MagicWindow');

function InteractiveOverlay2d(params) {
	var scene = new THREE.Scene();
	scene.name = 'ui2d';
	var camera = new THREE.OrthographicCamera(0, window.innerWidth, -window.innerHeight, 0, -100, 100);
	scene.add(camera);
	scene.camera = camera;

	manageSceneOnResizeObjects(scene);
	manageSceneOnEnterFrameObjects(scene);
	manageSceneRayCollisions(scene, params.rayEvents);

	this.camera = camera;
	this.scene = scene;
	this.onResize = _onResize.bind(this);
	this.onVR = _onVR.bind(this);
}

function _onResize(w, h) {
	if(w === undefined) return;
	this.scene.onResize(w, h);
	this.camera.right = w;
	this.camera.top = h;
	this.camera.updateProjectionMatrix();
}

function _switchRayLauncher(classRef) {
	switch(classRef) {
		case MagicWindowRayLauncher:
			return new classRef(this.camera);
		default:
			return null;
	}
}

function onEnterFrame(dt) {
	if((this.scene.rayLauncher && !this.rayLauncherClass) || (this.rayLauncherClass && !(this.scene.rayLauncher instanceof this.rayLauncherClass))) {
		this.scene.rayLauncher = _switchRayLauncher.call(this, this.rayLauncherClass);
	}
	this.scene.onEnterFrame(dt);
}

function _onVR(state) {
	if(state) {
		this.rayLauncherClass = null;
		this.scene.rayLauncher = null;
	} else {
		this.rayLauncherClass = MagicWindowRayLauncher;
	}
}

function render(renderer) {
	renderer.render(this.scene, this.camera);
}

InteractiveOverlay2d.prototype = {
	onEnterFrame,
	render
}

module.exports = InteractiveOverlay2d;

