// require('utils/debugging/threejsSafety')();
var urlparam = require('urlparam');
var RayEvents = require('input/RayEvents');
var InteractiveOverlay2d = require('views/InteractiveOverlay2d');
var isDesktop = require('utils/devices/isDesktop');
var isIOS = require('utils/devices/isIOS');
var onVR = require('utils/devices/onVR');
var onDayDream = require('utils/devices/onDayDream');
var CloseButton = require('ui/CloseButton');
var settings = require('settings');
var manageSceneOnEnterFrameObjects = require('utils/manageSceneOnEnterFrameObjects');
var manageSceneOnAddRemoveObjects = require('utils/manageSceneOnAddRemoveObjects');
var manageSceneRayCollisions = require('utils/manageSceneRayCollisions');

function ThreeAppBase () {
  // Scale for retina
  this.onResizeCallbacks = [];
  this.onEnterFrameCallbacks = [];

  // Show the <canvas> on screen
  const canvas = document.querySelector('#canvas');

  // Our WebGL renderer with alpha and device-scaled
  const renderer = new THREE.WebGLRenderer({
    canvas,
    transparent: false,
    stencil: false,
    alpha: false,
    preserveDrawingBuffer: false,
    antialias: isDesktop()
  });
  renderer.setPixelRatio(settings.devicePixelRatio);
  renderer.setClearColor(0x000000, 1);
  renderer.sortObjects = true;
  this.registerOnResize(renderer.setSize.bind(renderer));

  const rayEvents = new RayEvents(canvas);
  this.registerOnResize(rayEvents.resize.bind(rayEvents));

  const vrEffect = new THREE.VREffect(renderer);
  this.registerOnResize(vrEffect.setSize.bind(vrEffect));

  var scene = new THREE.Scene();
  manageSceneOnEnterFrameObjects(scene);
  manageSceneOnAddRemoveObjects(scene);
  manageSceneRayCollisions(scene, rayEvents);
  this.registerOnEnterFrame(scene.onEnterFrame.bind(scene));
  var interactiveOverlay2d = new InteractiveOverlay2d({
    rayEvents: rayEvents,
    renderer: renderer
  });

  this.registerOnResize(interactiveOverlay2d.onResize);
  this.registerOnEnterFrame(interactiveOverlay2d.onEnterFrame.bind(interactiveOverlay2d));

  window.addEventListener('resize', _resize.bind(this));
  _resize.call(this);

  this.renderer = renderer;
  this.canvas = canvas;
  this.scene = scene;
  this.interactiveOverlay2d = interactiveOverlay2d;
  this.vrEffect = vrEffect;
  this.rayEvents = rayEvents;
  this.lastTime = performance.now();

  this.rafLoop = _rafLoop.bind(this);

  this.backupCamera = new THREE.PerspectiveCamera();
  this.backupCamera.position.set(0, 1.8, 0);

  this.vrEffect.requestAnimationFrame(this.rafLoop);
  onVR(_onVR.bind(this));
}

function _getVRButton() {
  if(!this.vrButton) {
    this.vrButton = new CloseButton({
      icon: 'vr',
      iconSizeRatio: 0.8,
      radius: 40,
      onOverRotate: 0
    });
    function onResizePositionVRButton(w, h) {
      this.position.x = w - 50;
      this.position.y = 50;
    }
    this.vrButton.onResize = onResizePositionVRButton.bind(this.vrButton);
    function onSelectRequestVR() {
      this.vrEffect.requestPresent();
    }
    this.vrButton.onSelect = onSelectRequestVR.bind(this);
  }
  return this.vrButton;
}

function _onVR(state) {
  if(!state) {
    var vrButton = _getVRButton.call(this);
    this.interactiveOverlay2d.scene.add(this.vrButton);
    this.hasVRButton = true;
  } else if(this.hasVRButton){
    var vrButton = _getVRButton.call(this);
    this.interactiveOverlay2d.scene.remove(this.vrButton);
  }
  this.interactiveOverlay2d.onVR(state);
}

function _onEnterFrame () {
  var now = performance.now();
  var dt = (now - this.lastTime) * 0.001;
  this.lastTime = now;
  for (var i = 0; i < this.onEnterFrameCallbacks.length; i++) {
    this.onEnterFrameCallbacks[i](dt, this.state);
  }
  this.vrEffect.render(this.scene, this.camera || this.backupCamera);
  if(!this.vrEffect.isPresenting) {
    this.renderer.autoClear = false;
    this.interactiveOverlay2d.render(this.renderer);
    this.renderer.autoClear = true;
  }
}

function registerOnResize(callback) {
  this.onResizeCallbacks.push(callback);
  callback(this.width, this.height);
}

function unregisterOnResize(callback) {
  var index = this.onResizeCallbacks.indexOf(callback);
  if(index !== -1) {
    this.onResizeCallbacks.splice(index, 1);
  }
}

function registerOnEnterFrame(callback) {
  if(this.onEnterFrameCallbacks.indexOf(callback) !== -1) return;
  this.onEnterFrameCallbacks.push(callback);
}

function unregisterOnEnterFrame(callback) {
  var index = this.onEnterFrameCallbacks.indexOf(callback);
  if(index !== -1) {
    this.onEnterFrameCallbacks.splice(index, 1);
  }
}

function _resize () {
  let width = window.innerWidth;
  let height = window.innerHeight;
  // the +1 is for iPhone landscape on 9.2 safari,
  // otherwise the address bar does not disappear
  if (isIOS()) {
    width = width + 1;
    height = height + 1;
  }

  this.width = width;
  this.height = height;
  for (var i = 0; i < this.onResizeCallbacks.length; i++) {
    this.onResizeCallbacks[i](width, height);
  }

  if (isIOS()) {
    const fixScroll = () => {
      setTimeout(() => {
        window.scrollTo(0, 1);
      }, 500);
    };

    fixScroll();
  }

}


function _rafLoop() {
  _onEnterFrame.call(this);
  this.vrEffect.requestAnimationFrame(this.rafLoop);
}

ThreeAppBase.prototype = {
  registerOnResize: registerOnResize,
  unregisterOnResize: unregisterOnResize,
  registerOnEnterFrame: registerOnEnterFrame,
  unregisterOnEnterFrame: unregisterOnEnterFrame
};

module.exports = ThreeAppBase;
