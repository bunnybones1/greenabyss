const settings = require('settings');
const Blindfold = require('gameObjects/Blindfold');
const defaults = require('lodash.defaults');
const createOrbitControls = require('orbit-controls');
const onVR = require('utils/devices/onVR');
const onDayDream = require('utils/devices/onDayDream');
const InteractiveDayDreamController = require('input/InteractiveDayDreamController');

var __defaultParams = {
  fov: 60,
  near: 0.001,
  far: 100,
  nearBG: 10,
  farBG: 2000,
  teleportDuration: 0.5,
  useAnchor: true
};

const __targetVec3 = new THREE.Vector3();
var __phiBounds = {
  tight: [Math.PI * 0.2, Math.PI * 0.3],
  loose: [Math.PI * 0.25, Math.PI * 0.75]
}

function FirstPersonCamera (params) {
  params = defaults(params || {}, __defaultParams);
  THREE.PerspectiveCamera.call(this, params.fov, 1, params.near, params.far);
  const blindfold = new Blindfold({
    radius: 0.2,
    color: 0x000000
  });
  var cameraBG = new THREE.PerspectiveCamera(params.fov, 1, params.nearBG, params.farBG);
  cameraBG.layers.set(3);
  this.add(cameraBG);
  this.add(blindfold);
  this.rayEvents = params.rayEvents;
  blindfold.animateOut();
  this.position.set(0, 2, 0);
  var vrControls = new THREE.VRControls(this);
  vrControls.standing = true;
  this.vrControls = vrControls;
  this.blindfold = blindfold;
  this.cameraBG = cameraBG;
  this.onVRChangeCameraControls = _onVRChangeCameraControls.bind(this);
  this.onDayDream = _onDayDream.bind(this);
  this.onAdd = _onAdd.bind(this);
  this.onRemove = _onRemove.bind(this);

  if(params.useAnchor) {
    this.anchor = new THREE.Object3D();
    this.anchor.add(this);
    this.anchor.onAdd = this.onAdd;
    this.anchor.onRemove = this.onRemove;
    this.anchor.onEnterFrame = this.onEnterFrame.bind(this);
    this.anchor.onResize = this.onResize.bind(this);
  }
}

FirstPersonCamera.prototype = Object.create(THREE.PerspectiveCamera.prototype);

var __proto = FirstPersonCamera.prototype;
__proto.onEnterFrame = onEnterFrame;
__proto.onResize = onResize;
__proto.getDayDreamController = getDayDreamController;

function onEnterFrame (dt) {
  this.cameraControls.update();
  if(this.dayDreamController && this.dayDreamController.parent) {
    this.dayDreamController.onEnterFrame(dt);
  }
}

function onResize (width, height) {
  const aspect = width / height;
  this.aspect = aspect;
  this.updateProjectionMatrix();
}

function _onVRChangeCameraControls(vr) {
  if(this.cameraControls && this.cameraControls.disable) {
    this.cameraControls.disable();
  }
  if (vr) {
    // Apply VR headset positional data to camera.
    this.cameraControls = _getVRControls.call(this);
  } else {
    // 3D orbit controller with damping
    this.cameraControls = _getOrbitControls.call(this);
  }
  if(this.cameraControls && this.cameraControls.enable) {
    this.cameraControls.enable();
  }
}

function getDayDreamController() {
  if(!this.dayDreamController) {
    this.dayDreamController = new InteractiveDayDreamController({
      camera: this,
      rayEvents: this.rayEvents
    });
  }
  return this.dayDreamController;
}

function _onDayDream(dayDream) {
  if(dayDream) {
    var dayDreamController = this.getDayDreamController();
    this.parent.add(dayDreamController);
    console.log('DAYDREAM CONTROLLER START');
    dayDreamController.position.set(0.25, 1.4, -0.5);
  } else {
    if(this.dayDreamController && this.dayDreamController.parent) {
      this.dayDreamController.parent.remove(this.dayDreamController);
      console.log('DAYDREAM CONTROLLER STOP');
    }
  }
}

function _getVRControls() {
  if(!this.vrControls) {
    this.vrControls = new THREE.VRControls(this.camera);
    this.vrControls.standing = true;
  }
  return this.vrControls;
}

function _getOrbitControls() {
  if(!this.orbitControls) {
    this.orbitControls = createOrbitControls({
      distance: 0,
      zoom: false,
      pinch: false,
      rotateSpeed: -0.1,
      phiBounds: __phiBounds.loose,
    });
  }
  return this.orbitControls;
}

function _onAdd() {
  onVR(this.onVRChangeCameraControls);
  onDayDream(this.onDayDream);
}

function _onRemove() {
  onVR.remove(this.onVRChangeCameraControls);
  onDayDream.remove(this.onDayDream);
}


module.exports = FirstPersonCamera;