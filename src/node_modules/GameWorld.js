var THREE = require('three');
var defaults = require('lodash.defaults');

var TestSphere = require('meshes/TestSphere');
var Sky = require('gameObjects/Sky');
var onVR = require('utils/devices/onVR');
var onDayDream = require('utils/devices/onDayDream');
var FirstPersonCamera = require('cameras/FirstPerson');
var FireLight = require('lights/Fire');
var ThirdPersonCamera = require('cameras/ThirdPerson');
var getColliderMaterial = require('materials/getColliderMaterial');

var addTestGeometry = require('tests/addTestGeometry');
var addTrees = require('gameObjects/addTrees');
var CarvableTetrahedron = require('gameObjects/CarvableTetrahedron');
var GroundColliderThirdPerson = require('gameObjects/GroundColliderThirdPerson');

var DynamicTextureManager = require('textures/DynamicTextureManager');

const MagicWindowRayLauncher = require('input/rayLaunchers/MagicWindow');
const DayDreamControllerRayLauncher = require('input/rayLaunchers/DayDreamController');
const CardboardRayLauncher = require('input/rayLaunchers/Cardboard');
const PlayerIntentionHighlightWalk = require('gameObjects/PlayerIntentionHighlightWalk');

var __defaultParams = {
};

function GameWorld(params) {
	params = defaults(params, __defaultParams);
	if(!params.scene) throw new Error('Missing a threejs scene.');
	var app = params.app;
	var scene = params.scene;
	var renderer = params.renderer;
	var rayEvents = params.rayEvents;

	var cameraFirstPerson = new FirstPersonCamera({
		rayEvents: rayEvents
	});

	var cameraThirdPerson = new ThirdPersonCamera();
	scene.add(cameraThirdPerson);

	this.dynamicTextureManager = new DynamicTextureManager({
		renderer: renderer
	});

	var material = new THREE.MeshStandardMaterial({
		map: this.dynamicTextureManager.maps.map.texture,
		normalMap: this.dynamicTextureManager.maps.normalMap.texture,
		emissive: 0xffffff,
		emissiveMap: this.dynamicTextureManager.maps.emissiveMap.texture,
		subSurfaceAbsorbColorMap: this.dynamicTextureManager.maps.subSurfaceAbsorbColorMap.texture,
		metalnessMap: this.dynamicTextureManager.maps.metalnessMap.texture,
		roughnessMap: this.dynamicTextureManager.maps.roughnessMap.texture,
		// aoMap: this.dynamicTextureManager.maps.aoMap,
		// alphaMap: this.dynamicTextureManager.maps.alphaMap.texture,	
		// alphaTest: 0.5,
		// transparent: true,
		// side: THREE.DoubleSide
	});
	this.dynamicTextureManager.linkMaterial(material);

	addTestGeometry({
		scene: scene,
		material: material
	});

	addTrees({
		scene: scene,
		material: material
	});

	var groundColliderThirdPerson = new GroundColliderThirdPerson();
	var groundColliderFirstPerson = new GroundColliderThirdPerson();
	groundColliderFirstPerson.onDrag = onDragGroundFirstPerson;
	groundColliderFirstPerson.onMove = onDragGroundFirstPerson;
	groundColliderFirstPerson.onStart = onStartGroundFirstPerson;
	groundColliderFirstPerson.onEnd = onEndGroundFirstPerson;
	var teleportMaxDistance = 4;
	var moveableItems = [
		cameraFirstPerson.anchor,
		cameraThirdPerson
	];
	function onDragGroundFirstPerson(pos) {
		if(teleporting) return;
		if(pos.distanceTo(cameraFirstPerson.anchor.position) < teleportMaxDistance) {
			playerIntentionHighlightWalk.position.copy(pos);
		} else {
			playerIntentionHighlightWalk.position.y = -100;
		}
	}
	function onStartGroundFirstPerson(pos) {
		if(teleporting) return;
		playerIntentionHighlightWalk.scale.y = 1;
	}
	var teleporting = false;
	function onEndGroundFirstPerson(pos) {
		if(teleporting) return;
		if(pos.distanceTo(cameraFirstPerson.anchor.position) < teleportMaxDistance) {
			teleporting = true;
			var delta = cameraFirstPerson.anchor.position.clone().sub(pos);
			cameraFirstPerson.blindfold.blink(moveDuringBlink);
			function moveDuringBlink() {
				moveableItems.forEach(moveItem);
				playerIntentionHighlightWalk.scale.y = 0.15;
				teleporting = false;
			}
			function moveItem(item) {
				item.position.sub(delta);
			}
		}
	}

	var playerIntentionHighlightWalk = new PlayerIntentionHighlightWalk();
	playerIntentionHighlightWalk.scale.y = 0.15;
	scene.add(playerIntentionHighlightWalk);

	var test = new CarvableTetrahedron({
		material: material
	});
	test.castShadow = true;
	test.receiveShadow = true;

	test.position.set(1.5, 1.5, -2);
	// scene.add(test);
	var sky = new Sky({
		scene: scene,
		renderer: renderer,
		mapPath: 'assets/textures/sky-sun-stars-lights-clouds-day-cycle.png',
		radius: 1600,
		pointScale: 30000,
		layer: 3
	});

	var _this = this;
	this.rayLauncherClass = MagicWindowRayLauncher;
	function onVRChangeCameraAndRayLauncher(state) {
		var camRoot = app.camera;
		if(camRoot && camRoot.anchor) camRoot = camRoot.anchor;
		if(camRoot && camRoot.parent) {
			camRoot.parent.remove(camRoot);
		}
		playerIntentionHighlightWalk.visible = state;
		if(state) {
			app.camera = cameraFirstPerson;
			cameraFirstPerson.anchor.position.x = fireLight.position.x;
			cameraFirstPerson.anchor.position.z = fireLight.position.z;
			_this.rayLauncherClass = CardboardRayLauncher;
			scene.add(cameraFirstPerson.anchor);
			scene.add(groundColliderFirstPerson);
			scene.remove(groundColliderThirdPerson);
		} else {
			app.camera = cameraThirdPerson;
			_this.rayLauncherClass = MagicWindowRayLauncher;
			scene.add(cameraThirdPerson);
			scene.add(groundColliderThirdPerson);
			scene.remove(groundColliderFirstPerson);
		}
	}
	onVR(onVRChangeCameraAndRayLauncher);


	function onDayDreamChangeRayLauncher(state) {
		if(state) {
			_this.rayLauncherClass = DayDreamRayLauncher;
		} else {
			_this.rayLauncherClass = CardboardRayLauncher;
		}
	}


	var fireLight = new FireLight();
	moveableItems.push(fireLight);
	scene.add(fireLight);
	fireLight.position.set(0, 0.5, 0);

	renderer.shadowMap.enabled = true;
	renderer.shadowMap.type = THREE.PCFShadowMap;


	this.scene = scene;
	this.sky = sky;
	this.fireLight = fireLight;
	this.test = test;
	this.cameraFirstPerson = cameraFirstPerson;
	this.cameraThirdPerson = cameraThirdPerson;
	this.groundColliderThirdPerson = groundColliderThirdPerson;
	this.playerIntentionHighlightWalk = playerIntentionHighlightWalk;
	this.app = app;
}

function _switchRayLauncher(classRef) {
	switch(classRef) {
		case MagicWindowRayLauncher:
			return new classRef(this.cameraThirdPerson);
		case CardboardRayLauncher:
			return new classRef(this.cameraFirstPerson);
		case DayDreamRayLauncher:
			return new classRef(this.cameraFirstPerson.getDayDreamController());
		default:
			return null;
	}
}

function onEnterFrame(dt) {
	if((this.scene.rayLauncher && !this.rayLauncherClass) || (this.rayLauncherClass && !(this.scene.rayLauncher instanceof this.rayLauncherClass))) {
		this.scene.rayLauncher = _switchRayLauncher.call(this, this.rayLauncherClass);
	}
	this.dynamicTextureManager.update();
	this.sky.update();
	this.cameraThirdPerson.position.add(this.groundColliderThirdPerson.panDelta);
	this.fireLight.position.add(this.groundColliderThirdPerson.panDelta);
	this.playerIntentionHighlightWalk.position.add(this.groundColliderThirdPerson.panDelta);
	this.groundColliderThirdPerson.resetPanDelta();
	this.sky.shadowOffset.x = this.fireLight.position.x;
	this.sky.shadowOffset.z = this.fireLight.position.z;
	this.sky.moveTo(this.app.camera.position);
}

function onResize(w, h) {
	this.cameraFirstPerson.onResize(w, h);
	this.cameraThirdPerson.onResize(w, h);
}

GameWorld.prototype = {
	onEnterFrame: onEnterFrame,
	onResize: onResize
}

module.exports = GameWorld;