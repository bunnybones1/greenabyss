var getColliderMaterial = require('materials/getColliderMaterial');
var defaults = require('lodash.defaults');
var THREE = require('three');


var __defaultParams = {
	size: 40,
	segs: 1,
	height: 0.05
};

function GroundColliderThirdPerson (params) {
	params = defaults(params, __defaultParams);
	THREE.Mesh.call(this, new THREE.PlaneGeometry(params.size, params.size, params.segs, params.segs), getColliderMaterial());
	this.position.y = params.height;
	this.rotation.x = Math.PI * -0.5;
	this.cursor = new THREE.Vector3();
	this.panDelta = new THREE.Vector3();
	this.collisionOwner = this;
}

GroundColliderThirdPerson.prototype = Object.create(THREE.Mesh.prototype);
var __proto = GroundColliderThirdPerson.prototype;
defaults(__proto, {
	getColliders: getColliders,
	onOver: onOver,
	onStart: onStart,
	onMove: onMove,
	onDrag: onDrag,
	onEnd: onEnd,
	onOut: onOut,
	onSelect: onSelect,
	resetPanDelta: resetPanDelta
});


function getColliders() {
	return [this];
}
function onOver(){
	console.log('ground collider on Over!');
}
function onStart(pos){
	this.cursor.copy(pos);
	console.log('ground collider on Start!');
}
function onDrag(pos){
	if(!pos) return;
	this.panDelta.sub(pos);
	this.panDelta.add(this.cursor);
	this.cursor.copy(pos);
	console.log('ground collider on Drag!');
}
function onMove(pos){
}
function onEnd(){
	console.log('ground collider on End!');
}
function onOut(){
	console.log('ground collider on Out!');	
}
function onSelect(){
	console.log('ground collider on Select!');
}

function resetPanDelta() {
	this.cursor.add(this.panDelta);
	this.panDelta.set(0, 0, 0);
}

module.exports = GroundColliderThirdPerson;

