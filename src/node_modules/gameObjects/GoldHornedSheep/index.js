var defaults = require('lodash.defaults');
var THREE = require('three');

require('three/examples/js/loaders/ColladaLoader2');

var __defaultParams = {
	testBones: false
};
	
var __material;
function __getMaterial() {
	if(!__material) {
		__material = new THREE.MeshStandardMaterial({
			map: THREE.ImageUtils.loadTexture('assets/textures/gold-horned-sheep-diffuse.png'),
			// normalMap: THREE.ImageUtils.loadTexture('assets/textures/gold-horned-sheep-normal.png'),
			// emissive: 0xffffff,
			roughness: 1.0,
			metalness: 0.6,
			// emissiveMap: THREE.ImageUtils.loadTexture('assets/textures/gold-horned-sheep-emissive.png'),
			subSurfaceAbsorbColorMap: THREE.ImageUtils.loadTexture('assets/textures/gold-horned-sheep-subSurfaceAbsorbColor.png'),
			metalnessMap: THREE.ImageUtils.loadTexture('assets/textures/gold-horned-sheep-metalness.png'),
			roughnessMap: THREE.ImageUtils.loadTexture('assets/textures/gold-horned-sheep-roughness.png'),
			// wireframe: true
		});
	}
	return __material;
}

function GoldHornedSheep(params) {
	params = defaults(params, __defaultParams);

	THREE.Object3D.call(this);

	this.testBones = params.testBones;
	this.material = __getMaterial();
	var loader = new THREE.ColladaLoader();
	this.boneMaterial = params.boneMaterial;
	loader.load('assets/meshes/gold-horned-sheep.dae', _onLoadColladaBuildMeshes.bind(this, params));
}

function _onLoadColladaBuildMeshes (params, colladaData) {
	var geometry = colladaData.library.geometries['sheep-skin-lib'].build['gold horned sheep'].geometry;
	var sheep = new THREE.Mesh(
		geometry, 
		this.material
	);
	var skeleton = colladaData.scene.children[1];
	skeleton.scale.multiplyScalar(3);
	skeleton.position.x = 1.5;
	skeleton.position.z = -1;
	skeleton.position.y = 1.5;
	skeleton.position.originalX = skeleton.position.x;
	skeleton.position.originalY = skeleton.position.y;
	skeleton.position.originalZ = skeleton.position.z;
	this.add(skeleton);
	var boneMaterial = this.boneMaterial;
	var bones = [];
	function processBones(target) {
		if(target.name.indexOf('bone ') !== -1) {
			bones.push(target);
			target.rotation.originalZ = target.rotation.z;
		} 
		target.children.forEach(processBones);
		if(target.name.indexOf('bone_') !== -1) {
			if(target.material) {
				target.castShadow = true;
				target.receiveShadow = true;

				target.material = boneMaterial;
				boneMaterial.morphUvsToMaterialSwatch(target.geometry, 'bone');
			}
		}
	}
	processBones(skeleton);

	function filterByName(name, bone) {
		return bone.name.indexOf(name) !== -1;
	}

	var spineBones = bones.filter(filterByName.bind(null, 'spine'));

	this.skull = bones.filter(filterByName.bind(null, 'skull'))[0];
	this.jaw = bones.filter(filterByName.bind(null, 'jaw'))[0];

	sheep.scale.multiplyScalar(0.03);
	sheep.rotation.x = Math.PI * -0.5;
	this.add(sheep);
	sheep.castShadow = true;
	sheep.receiveShadow = true;
	this.spineBones = spineBones;
	this.skeleton = skeleton;

}

GoldHornedSheep.prototype = Object.create(THREE.Object3D.prototype);

GoldHornedSheep.prototype.onEnterFrame = function(dt) {
	var now = performance.now();
	var nowish = now * 0.005;
	var nowishSlow = nowish * 0.5;
	if(this.skeleton) {
		this.skeleton.position.set(
			this.skeleton.position.originalX,
			this.skeleton.position.originalY + Math.cos(nowish+Math.PI * -0.5) * 0.1,
			this.skeleton.position.originalZ + Math.sin(nowish+Math.PI * -0.5) * 0.1
		);
		this.spineBones.forEach(function(bone, i) {
			bone.rotation.z = bone.rotation.originalZ - Math.sin(nowish + i) * 0.1;
		});
		this.skull.rotation.x = Math.sin(nowishSlow) * 0.3;
		this.jaw.rotation.z = Math.sin(nowish - 3) * 0.3 - 0.3;
	}
	// this.rotation.y += 0.01;
}

module.exports = GoldHornedSheep;