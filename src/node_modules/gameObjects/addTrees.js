var THREE = require('three');
var defaults = require('lodash.defaults');
var eases = require('eases');
var seedRandom = require('utils/seedRandom');
require('three/examples/js/loaders/ColladaLoader2');

var __defaultParams = {
	total: 32,
	merge: false,
	radiusMin: 6,
	radiusMax: 24,
	sizeMin: 0.005,
	sizeMax: 0.01,
	layer: 0
};

function addTrees(params) {
	params = defaults(params, __defaultParams);
	var loader = new THREE.ColladaLoader2();
	this.trees = [];
	this.scene = params.scene;
	loader.load('assets/meshes/tree-pine.dae', _onLoadColladaBuildMeshes.bind(this, params));
}

function _onLoadColladaBuildMeshes(params, colladaData) {
	var rand = seedRandom(40);
	var geometryBaseNames = [
		'Box001'
	];
	var geometries = [];
	geometryBaseNames.forEach(function(baseName) {
		var geometry = colladaData.library.geometries[baseName+'-lib'].build['Material #2'].geometry;
		params.material.morphUvsToMaterialSwatch(geometry, 'leaf');
		geometries.push(geometry);
	});

	for (var i = 0; i < params.total; i++) {
		var index = Math.floor(eases.sineIn(i/params.total) * geometries.length);
		console.log('geom', index);
		var tree = new THREE.Mesh(
			geometries[index], 
			params.material
		);

		var pos = tree.position;
		pos.set(
			rand(-1, 1),
			0,
			rand(-1, 1)
		);
		pos.normalize();
		var dist = rand(params.radiusMin, params.radiusMax);
		var scale = rand(params.sizeMin, params.sizeMax);
		tree.scale.multiplyScalar(scale);
		tree.rotation.x = Math.PI * -0.5;
		tree.rotation.order = "YXZ";
		tree.rotation.y = rand() * Math.PI * 2;
		pos.multiplyScalar(dist);
		this.scene.add(tree);
		tree.castShadow = true;
		tree.receiveShadow = true;
		tree.layers.set(params.layer);
		this.trees.push(tree);
	}
}

module.exports = addTrees;