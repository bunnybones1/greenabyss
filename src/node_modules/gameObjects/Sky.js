var THREE = require('three');
var defaults = require('lodash.defaults');
var SpriteSky = require('./SpriteSky');
var SpriteSun = require('./SpriteSun');
var Stars = require('./Stars');
var eases = require('eases');
var createImageColorSampler = require('utils/createImageColorSampler');

var __defaultParams = {
	skyColor: 0xafbfef,
	groundColor: 0x4f3f2f,
	dayOnly: false,
	pointScale: 2000,
	radius: 80,
	mapFrameHeight: 6,
	mapFrames: 48, 
	mapTotalHeight: 512, 
};


function Sky(params) {
	params = defaults(params, __defaultParams);
	if(!params.scene) throw new Error('Provide a scene');
	if(!params.renderer) throw new Error('Provide a renderer');
	var scene = params.scene;
	var skyColor = new THREE.Color(params.skyColor);
	var groundColor = new THREE.Color(params.groundColor);
	this.originalGroundColor = groundColor.clone();
	var ambientLight = new THREE.HemisphereLight(skyColor, groundColor);
	skyColor = ambientLight.color;
	groundColor = ambientLight.groundColor;
	scene.add(ambientLight);
	var sunLight = new THREE.DirectionalLight(0xffffaf, 0.75);
	sunLight.position.set( 0, 100, 100 );
	sunLight.target.position.set( 0, 0, 0 );

	if(!params.mapPath) {
		throw new Error('You must provide a map path.');
	}

	var emptyColors = [];
	var emptyColor = new THREE.Color(0.5, 0.5, 0.5);
	for (var i = 0; i < params.mapFrames; i++) {
		emptyColors.push(emptyColor);
	}
	this.samplesSkyColor = emptyColors;
	this.samplesSunColor = emptyColors;
	this.samplesAtmosphereColor = emptyColors;

	var skySpriteMap = THREE.ImageUtils.loadTexture(params.mapPath, undefined, onMapLoad);
	skySpriteMap.generateMipmaps = false;
	skySpriteMap.magFilter = THREE.LinearFilter;
	skySpriteMap.minFilter = THREE.LinearFilter;

	var _this = this;
	function onMapLoad(texture) {
		var sampleImage = createImageColorSampler(texture.image);

		var samplesSkyColor = [];
		var samplesSunColor = [];
		var samplesAtmosphereColor = [];
		for (var i = 0; i < params.mapFrames; i++) {
			samplesSkyColor.push(sampleImage(0, i * params.mapFrameHeight + 1));
			samplesSunColor.push(sampleImage(1, i * params.mapFrameHeight + 4));
			samplesAtmosphereColor.push(sampleImage(0, i * params.mapFrameHeight + 3));
		}
		_this.samplesSkyColor = samplesSkyColor;
		_this.samplesSunColor = samplesSunColor;
		_this.samplesAtmosphereColor = samplesAtmosphereColor;
	}

	var sky = new SpriteSky({
		mapTexture: skySpriteMap,
		mapFrameHeight: params.mapFrameHeight,
		mapFrames: params.mapFrames, 
		mapTotalHeight: params.mapTotalHeight, 
		radius: params.radius
	});		
	scene.add(sky);

	var stars = new Stars({
		mapTexture: skySpriteMap,
		mapFrameHeight: params.mapFrameHeight,
		mapFrames: params.mapFrames, 
		mapTotalHeight: params.mapTotalHeight, 
		total: 20000,
		pointScale: params.pointScale,
		radius: params.radius
	});
	stars.rotation.x = Math.PI * 0.66;
	stars.rotation.order = "ZYX";
	scene.add(stars);

	var sun = new SpriteSun({
		mapTexture: skySpriteMap,
		mapFrameHeight: params.mapFrameHeight,
		mapFrames: params.mapFrames, 
		mapTotalHeight: params.mapTotalHeight, 
		radius: params.radius
	});
	// sun.rotation.x = Math.PI * 1.5;
	scene.add(sun);

	sunLight.castShadow = true;
	scene.add(sunLight);


	this.mapFrames = params.mapFrames;
	this.mapFramePercentOfDay = 1 / params.mapFrames;

	this.sunLight = sunLight;
	this.sky = sky;
	this.sun = sun;
	this.stars = stars;
	this.skyColor = skyColor;
	this.sunColor = sunLight.color;
	this.groundColor = groundColor;
	this.dayOnly = params.dayOnly;
}

Sky.prototype.update = function() {
	var speed = 0.0000015;
	var dayPercent = Date.now() * speed;
	var daysPerYear = 365;
	var yearPercent = Date.now() * speed / daysPerYear;
	// dayPercent = 1-0.45;
	// dayPercent = 0.49;
	var angle = dayPercent * Math.PI * 2;
	if(this.dayOnly) {
		if((angle % (Math.PI * 2)) > Math.PI) {
			angle -= Math.PI;
		}
	}
	this.sun.rotation.z = angle + Math.PI * -0.5;
	var skyProgressLinear = (dayPercent + 0.25) % 1;
	var skyProgress = skyProgressLinear + Math.sin(dayPercent * Math.PI * 2 * 2) / 16;
	this.sky.material.progress = skyProgress;
	this.sun.material.progress = skyProgress;
	this.stars.material.progress = skyProgress;
	this.stars.rotation.z = (dayPercent + yearPercent) * Math.PI * 2;

	this.sunLight.position.set(
		Math.cos(angle) * 90,
		Math.sin(angle) * 90,
		0
	);

	var remainder = skyProgress % this.mapFramePercentOfDay;
	var frame1 = Math.round((skyProgress - remainder) * this.mapFrames);
	var frame2 = (frame1+1) % this.mapFrames;
	var mix = remainder * this.mapFrames;
	this.skyColor.copy(this.samplesSkyColor[frame1]);
	this.skyColor.lerp(this.samplesSkyColor[frame2], mix);
	this.sunColor.copy(this.samplesSunColor[frame1]);
	this.sunColor.lerp(this.samplesSunColor[frame2], mix);
	this.groundColor.copy(this.samplesAtmosphereColor[frame1]);
	this.groundColor.lerp(this.samplesAtmosphereColor[frame2], mix);
	this.sunColor.multiplyScalar(1.25);
	this.skyColor.multiplyScalar(0.65);
	this.groundColor.multiplyScalar(0.3);
}

Sky.prototype.moveTo = function(pos) {
	this.sky.position.copy(pos);
	this.sun.position.copy(pos);
	this.stars.position.copy(pos);
}

module.exports = Sky;