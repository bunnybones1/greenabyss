var THREE = require('three');
var defaults = require('lodash.defaults');
var SkySampler = require('utils/SkySampler');

var __defaultParams = {
	skyColor: 0xafbfef,
	groundColor: 0x4f3f2f,
	dayOnly: false
};


function Sky(params) {
	params = defaults(params, __defaultParams);
	if(!params.scene) throw new Error('Provide a scene');
	if(!params.renderer) throw new Error('Provide a renderer');
	var scene = params.scene;
	var skyColor = new THREE.Color(params.skyColor);
	var groundColor = new THREE.Color(params.groundColor);
	this.originalGroundColor = groundColor.clone();
	var ambientLight = new THREE.HemisphereLight(skyColor, groundColor);
	skyColor = ambientLight.color;
	groundColor = ambientLight.groundColor;
	scene.add(ambientLight);
	var sunLight = new THREE.DirectionalLight(0xffffaf, 0.75);
	sunLight.position.set( 0, 100, 100 );
	sunLight.target.position.set( 0, 0, 0 );

	var sky = new THREE.Sky(100);
	sky.uniforms.sunPosition.value = sunLight.position;
	scene.add(sky.mesh);

	var skySampler = new SkySampler({
		renderer: params.renderer,
		sunPosition: sunLight.position
	});

	skySampler.createSample(new THREE.Vector3(100, 100, 100), skyColor);
	skySampler.createSample(sunLight.position, sunLight.color);

	sunLight.castShadow = true;
	scene.add(sunLight);

	this.sunLight = sunLight;
	this.sky = sky;
	this.skyColor = skyColor;
	this.groundColor = groundColor;
	this.skySampler = skySampler;
	this.dayOnly = params.dayOnly;
}

Sky.prototype.update = function() {
	var angle = Date.now() * 0.00002 * Math.PI * 2;
	if(this.dayOnly) {
		if((angle % (Math.PI * 2)) > Math.PI) {
			angle -= Math.PI;
		}
	}

	this.sunLight.position.set(
		Math.cos(angle) * 90,
		Math.sin(angle) * 90,
		0
	);
	this.skySampler.update();
	if((angle % (Math.PI * 2)) > Math.PI) {
		this.skyColor.setRGB(0.15, 0.3, 0.5);
		var intensity = 1.0 - Math.pow(1.0 - Math.sin(angle % Math.PI), 2);
		this.skyColor.multiplyScalar(intensity);
		this.groundColor.setRGB(0.15, 0.3, 0.3);
		this.groundColor.multiplyScalar(intensity);
	} else {
		this.groundColor.copy(this.originalGroundColor);
	}
}

module.exports = Sky;