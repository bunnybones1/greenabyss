const THREE = require('three');
var defaults = require('lodash.defaults');
var pseudorandomSpacedPointsOnSphere = require('pseudorandom-spaced-points-on-sphere');
var eases = require('eases');

var __defaultParams = {
	total: 1000,
	iterations: 10,
	radius: 80,
	sizeMin: 0.2,
	sizeMax: 1,
};

function StarsGeometry(params) {
	params = defaults(params, __defaultParams);

	THREE.BufferGeometry.call( this );

	this.type = 'StarsGeometry';

	var vertex = new THREE.Vector3();

	// buffers

	var vertices = new Array(params.total * params.iterations * 3);
	var sizes = new Array(params.total);



	var radius = params.radius;
	var sizeMin = params.sizeMin;
	var sizeRange = params.sizeMax - sizeMin;
	var total = params.total;

	for (var j = 0; j < params.iterations; j++) {
		var points = pseudorandomSpacedPointsOnSphere(total, j * 999);
		var offset = j * total;
		var offset3 = j * total * 3;
		for (var i = 0; i < total; i++) {
			vertex.copy(points[i]);
			vertex.x *= 0.3;
			vertex.normalize();
			vertex.multiplyScalar(radius);
			vertex.toArray(vertices, i*3 + offset3);
			sizes[i + offset] = sizeMin + sizeRange * eases.expoIn(eases.expoIn(i / total));
		}
	}

	// build geometry

	this.addAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'size', new THREE.Float32BufferAttribute( sizes, 1 ) );
}

StarsGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );

module.exports = StarsGeometry;