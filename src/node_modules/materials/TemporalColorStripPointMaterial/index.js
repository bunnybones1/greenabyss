const defaults = require('lodash.defaults');
const THREE = require('three');
const glslify = require('glslify');

var __vertexShader;
function __getVertexShader() {
	if(!__vertexShader) {
		__vertexShader = glslify('./vertex.glsl');
	}
	return __vertexShader;
}

var __fragmentShader;
function __getFragmentShader() {
	if(!__fragmentShader) {
		__fragmentShader = glslify('./fragment.glsl');
	}
	return __fragmentShader;
}

const __defaultParams = {
  mapFrameHeight: 5, 
  mapFrames: 48, 
  uvOffsetY: 0, 
  mapTotalHeight: 256,
  pointScale: 1000,
  blendMode: 'screen'
};


const __blendModeParams = {
  'screen': {
    depthWrite: false,
    side: THREE.BackSide,
    blending: THREE.CustomBlending,
    blendEquation: THREE.AddEquation,
    blendSrc: THREE.OneMinusDstColorFactor,
    blendDst: THREE.OneFactor,
    transparent: true
  },
  'normal': {}
};

function Material(params) {
  params = defaults(params, __defaultParams);

  if(!params.mapTexture) {
    throw new Error('You must provide a map texture.');
  }
  var totalMapFrames = params.mapTotalHeight / params.mapFrameHeight;
  var usedFramesPercentage = params.mapFrames / totalMapFrames;
  var halfPixel = 0.5 / params.mapTotalHeight;
  var materialParams = {
    vertexShader: __getVertexShader(),
    fragmentShader: __getFragmentShader(),
    // depthTest: false,
    // wireframe: true,
    // side: THREE.DoubleSide,
    uniforms: {
      mapTexture: { type: 't', value: params.mapTexture },
      progress: { type: 'f', value: 0 },
      halfPixel: { type: 'f', value: halfPixel },
      scale: { type: 'f', value: params.pointScale },
      uvOffsetY: { type: 'f', value: params.uvOffsetY },
      mapFrames: { type: 'f', value: params.mapFrames },
      usedFramesPercentage: { type: 'f', value: usedFramesPercentage }
    }
  };
  defaults(materialParams, __blendModeParams[params.blendMode]);
  THREE.ShaderMaterial.call(this, materialParams);

  // material.visible = false;
}

Material.prototype = Object.create(THREE.ShaderMaterial.prototype);

Object.defineProperty(Material.prototype, 'progress', {
  set: function(val) {
    this.uniforms.progress.value = val%1;
  },
  get: function() {
    return this.uniforms.progress.value;
  }
});

module.exports = Material;