uniform float progress;
uniform float mapFrames;
uniform float usedFramesPercentage;
uniform sampler2D mapTexture;
#ifdef USE_FOG
  uniform vec3 colorFog;
  #ifdef FOG_EXP2
    uniform float fogDensity;
  #else
    uniform float fogNear;
    uniform float fogFar;
  #endif
#endif

varying vec4 vColor;

void main() {
  vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
  gl_Position = projectionMatrix * mvPosition;
  float frameRatio = 1.0 / mapFrames;
  float remainder = mod(progress, frameRatio);
  float quantizedProgress = progress - remainder;
  vec2 modifiedUV = uv;
  float inverseUsedFramesPercentage = 1.0 - usedFramesPercentage;
  modifiedUV.y += quantizedProgress * usedFramesPercentage + inverseUsedFramesPercentage;
  vec4 colorA = texture2D(mapTexture, modifiedUV);
  float quantizedProgress2 = quantizedProgress + frameRatio;
  modifiedUV = uv;
  modifiedUV.y += mod(quantizedProgress2, 1.0) * usedFramesPercentage + inverseUsedFramesPercentage;
  vec4 colorB = texture2D(mapTexture, modifiedUV);
  vColor = mix(colorA, colorB, (progress - quantizedProgress) * mapFrames);
  #ifdef USE_FOG
    float fogDepth = -mvPosition.z;
    #ifdef FOG_EXP2
      float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );
    #else
      float fogFactor = smoothstep( fogNear, fogFar, fogDepth );
    #endif
    vColor.rgb = mix( vColor.rgb, colorFog, fogFactor );
  #endif
}
