uniform float progress;
uniform float mapFrames;
uniform float usedFramesPercentage;
uniform sampler2D mapTexture;

varying vec4 vColor;

void main() {
  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
  float frameRatio = 1.0 / mapFrames;
  float remainder = mod(progress, frameRatio);
  float quantizedProgress = progress - remainder;
  vec2 modifiedUV = uv;
  float inverseUsedFramesPercentage = 1.0 - usedFramesPercentage;
  modifiedUV.y += quantizedProgress * usedFramesPercentage + inverseUsedFramesPercentage;
  vec4 colorA = texture2D(mapTexture, modifiedUV);
  float quantizedProgress2 = quantizedProgress + frameRatio;
  modifiedUV = uv;
  modifiedUV.y += mod(quantizedProgress2, 1.0) * usedFramesPercentage + inverseUsedFramesPercentage;
  vec4 colorB = texture2D(mapTexture, modifiedUV);
  vColor = mix(colorA, colorB, (progress - quantizedProgress) * mapFrames);
}
